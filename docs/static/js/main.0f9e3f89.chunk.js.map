{"version":3,"sources":["serviceWorker.js","config/store.js","app/navigation/actions.js","app/navigation/constants.js","app/navigation/reducer.js","app/navigation/components/NavigationBar.js","app/pages/home/Home.js","app/pages/blog/Blog.js","app/pages/aboutMe/AboutMe.js","app/pages/notFound/NotFound.js","app/App.js","index.js"],"names":["Boolean","window","location","hostname","match","history","NAVIGATE_TO_MAIN_SECTION","REACT_ROUTER_LOCATION_CHANGE","navigateToMainSection","sectionName","type","navigateTo","mainSections","routesToMainSections","navigationInitialState","activeMainSection","navigationReducer","state","action","path","payload","pathname","createBrowserHistory","middleware","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","store","createStore","combineReducers","router","connectRouter","navigation","NavigationBar","section","this","props","Navbar","bg","variant","sticky","className","Brand","Image","src","width","height","roundedCircle","Nav","to","data-testid","sectionLinkClass","onClick","React","Component","connect","dispatch","Home","Container","fluid","Row","Col","Blog","AboutMe","NotFound","Content","exact","component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f9e3f89.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history'\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\n\nimport { navigationReducer } from '../app/navigation/reducer'\n\n\nexport const history = createBrowserHistory()\n\nconst rootReducer = history => combineReducers({\n  router: connectRouter(history),\n  navigation: navigationReducer\n})\n\nconst middleware = composeWithDevTools(applyMiddleware(routerMiddleware(history), thunk))\n\nexport const store = createStore(rootReducer(history), middleware)\n","export const NAVIGATE_TO_MAIN_SECTION = 'NAVIGATE_TO_MAIN_SECTION'\nexport const REACT_ROUTER_LOCATION_CHANGE = '@@router/LOCATION_CHANGE'\n\nexport const navigateToMainSection = sectionName => ({\n  type: NAVIGATE_TO_MAIN_SECTION,\n  navigateTo: sectionName\n})\n","export const mainSections = {\n  HOME: 'HOME',\n  BLOG: 'BLOG',\n  ABOUT: 'ABOUT'\n}\n\nexport const routesToMainSections = {\n  '/': mainSections.HOME,\n  '/blog': mainSections.BLOG,\n  '/about': mainSections.ABOUT\n}\n","import { NAVIGATE_TO_MAIN_SECTION, REACT_ROUTER_LOCATION_CHANGE, navigateToMainSection } from './actions'\nimport { mainSections, routesToMainSections } from './constants'\n\nexport const navigationInitialState = {\n  activeMainSection: mainSections.HOME\n}\n\nexport const navigationReducer = (state = navigationInitialState, action) => {\n  switch ( action.type ) {\n    case NAVIGATE_TO_MAIN_SECTION:\n      return {\n        ...state,\n        activeMainSection: action.navigateTo\n      }\n    case REACT_ROUTER_LOCATION_CHANGE:\n      const path = routesToMainSections[action.payload.location.pathname]\n      return navigationReducer(state, navigateToMainSection(path))\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Image from 'react-bootstrap/Image'\nimport { mainSections } from '../constants'\nimport { navigateToMainSection } from '../actions'\n\nimport './NavigationBar.scss'\n\nclass NavigationBar extends React.Component {\n\n  sectionLinkClass(section) {\n    return this.props.activeMainSection === section ? 'NavLink active' : 'NavLink'\n  }\n\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" className=\"NavigationBar\">\n        <Navbar.Brand>\n          <Image src=\"/logo192.jpg\" width={ 40 } height={ 40 } roundedCircle/>\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Link to=\"/\"\n                data-testid='home-link'\n                className={ this.sectionLinkClass(mainSections.HOME) }\n                onClick={ () => this.props.navigateTo(mainSections.HOME) }>Home</Link>\n          <Link to=\"/blog\"\n                data-testid='blog-link'\n                className={ this.sectionLinkClass(mainSections.BLOG) }\n                onClick={ () => this.props.navigateTo(mainSections.BLOG) }>Blog</Link>\n          <Link to=\"/about\"\n                data-testid='about-link'\n                className={ this.sectionLinkClass(mainSections.ABOUT) }\n                onClick={ () => this.props.navigateTo(mainSections.ABOUT) }>About me</Link>\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\n\nexport default connect(\n  state => ({\n    activeMainSection: state.navigation.activeMainSection\n  }),\n  dispatch => ({\n    navigateTo: section => dispatch(navigateToMainSection(section))\n  })\n)(NavigationBar)\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport './Home.scss'\n\nconst Home = () =>\n  <Container className='Home' fluid={true}>\n    <Row>\n      <Col>\n        <h1>Home page</h1>\n      </Col>\n    </Row>\n  </Container>\n\nexport default Home","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport './Blog.scss'\n\nconst Blog = () =>\n  <Container className='Blog' fluid={true}>\n    <Row>\n      <Col>\n        <h1>Blog page</h1>\n      </Col>\n    </Row>\n  </Container>\n\nexport default Blog","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport './AboutMe.scss'\n\nconst AboutMe = () =>\n  <Container className='AboutMe' fluid={true}>\n    <Row>\n      <Col>\n        <h1>About page</h1>\n      </Col>\n    </Row>\n  </Container>\n\nexport default AboutMe","import React from 'react'\n\nconst NotFound = () =>\n  <div>Not found!</div>\n\nexport default NotFound","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { history, store } from '../config/store'\nimport { ConnectedRouter } from \"connected-react-router\"\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport NavigationBar from './navigation/components/NavigationBar'\nimport Home from './pages/home/Home'\nimport Blog from './pages/blog/Blog'\nimport AboutMe from './pages/aboutMe/AboutMe'\nimport NotFound from './pages/notFound/NotFound'\n\nimport './App.scss'\n\nconst Content = () =>\n  <div className=\"App\">\n    <NavigationBar/>\n    <Switch>\n      <Route exact path=\"/\" component={ Home }/>\n      <Route exact path=\"/blog\" component={ Blog }/>\n      <Route exact path=\"/about\" component={ AboutMe }/>\n      <Route component={ NotFound }/>\n    </Switch>\n  </div>\n\nconst App = () =>\n  <Provider store={ store }>\n    <ConnectedRouter history={ history }>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={ Content }/>\n        </Switch>\n      </BrowserRouter>\n    </ConnectedRouter>\n  </Provider>\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './app/App'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.scss'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}