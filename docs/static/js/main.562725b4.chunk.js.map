{"version":3,"sources":["app/features/articles/articlesScanner.js","app/features/articles/articlesSlice.js","config/store.js","serviceWorker.js","config/router.js","app/navigation/components/NavigationBar.js","app/pages/home/Home.js","app/pages/blog/Blog.js","app/pages/aboutMe/AboutMe.js","app/pages/notFound/NotFound.js","app/App.js","index.js"],"names":["scanRepository","url","a","fetch","then","response","status","text","html","parse","catch","error","console","message","undefined","querySelectorAll","articlesReducer","createSlice","name","initialState","reducers","reducer","configureStore","articles","Boolean","window","location","hostname","match","mainSections","createBrowserHistory","routesToMainSections","NavigationBar","useLocation","sectionLinkClass","section","pathname","className","to","data-testid","Home","Blog","useState","article","setArticle","useEffect","fetchData","children","AboutMe","NotFound","App","dispatch","useDispatch","result","log","JSON","stringify","exact","path","component","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAEaA,EAAc,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACTC,MAAMF,GACtBG,MAAK,SAAAC,GAAQ,OAAwB,MAApBA,EAASC,OAAiBD,EAASE,OAAS,MAC7DH,MAAK,SAAAI,GAAI,OAAIC,YAAMD,MACnBE,OAAM,SAAAC,GACLC,QAAQD,MAAR,8BAAqCA,EAAME,aALnB,cACtBL,EADsB,8BAQZM,IAATN,EACHA,EAAKO,iBAAiB,wBACtB,IAVwB,2CAAH,sDCSdC,EANSC,YAAY,CAChCC,KAAM,WACNC,aAJmB,GAKnBC,SAAU,KAGiCC,QCR9BC,cAAe,CAC5BD,QAAS,CAACE,cCQQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdOC,GAFUC,cAGf,QADKD,EAEL,OAFKA,EAGJ,QAGIE,EAAuB,CAClC,IAAKF,EACL,QAASA,EACT,SAAUA,GCRCG,G,MAAgB,WAC3B,IAAMN,EAAWO,cACXC,EAAmB,SAAAC,GAAO,OAAIA,IAAYJ,EAAqBL,EAASU,UAAY,iBAAmB,WAE7G,OACE,sBAAKC,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAIC,cAAY,YAAYF,UAAWH,EAAiBL,GAAjE,kBACA,cAAC,IAAD,CAAMS,GAAG,QAAQC,cAAY,YAAYF,UAAWH,EAAiBL,GAArE,kBACA,cAAC,IAAD,CAAMS,GAAG,SAASC,cAAY,aAAaF,UAAWH,EAAiBL,GAAvE,2BCVOW,G,MAAO,kBAClB,iCACE,+C,yBCDSC,G,OAAO,WAAO,IAAD,EACMC,wBAAS5B,GADf,mBACjB6B,EADiB,KACRC,EADQ,KAWxB,OARAC,qBAAU,WAKRD,EAJe,uCAAG,4BAAA1C,EAAA,sEACOC,MAAM,0FADb,UAEW,OADrBE,EADU,QAEAC,OAFA,gCAEuBD,EAASE,OAFhC,+CAEyC,GAFzC,mFAAH,oDAIJuC,MACV,CAACH,IAGF,qBAAKN,UAAU,UAAf,SACE,cAAC,IAAD,CAAeU,SAAUJ,QCdlBK,G,OAAU,kBACrB,iCACE,gDCHSC,EAAW,kBACtB,8CCQWC,G,OAAM,WACjB,IAAMC,EAAWC,cAMjB,OAJAP,qBAAU,WACRM,ETDqB,uCAAM,WAAMA,GAAN,eAAAjD,EAAA,sEACRF,EAAe,wCADP,OACvBqD,EADuB,OAE7BzC,QAAQ0C,IAAI,wBACZ1C,QAAQ0C,IAAIC,KAAKC,UAAUH,IAHE,2CAAN,0DSKrB,sBAAKhB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,QAAQC,UAAWlB,IACrC,cAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWX,IACtC,cAAC,IAAD,CAAOW,UAAWV,Y,OCf1BW,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SRmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,iB","file":"static/js/main.562725b4.chunk.js","sourcesContent":["import {parse} from 'node-html-parser'\n\nexport const scanRepository = async url => {\n  const html = await fetch(url)\n    .then(response => response.status === 200 ? response.text() : '')\n    .then(html => parse(html))\n    .catch(error => {\n      console.error(`SON OF A BIATCH.... ${error.message}`)\n      return undefined\n    })\n  return html !== undefined\n    ? html.querySelectorAll('a.js-navigation-open')\n    : []\n}\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport {scanRepository} from \"./articlesScanner\";\n\nconst initialState = {}\n\nconst articlesSlice = createSlice({\n  name: 'articles',\n  initialState,\n  reducers: {}\n})\n\nexport const articlesReducer = articlesSlice.reducer\n\n\nexport const loadStuff = () => async dispatch => {\n  const result = await scanRepository('https://github.com/saljuama/articles')\n  console.log('********************')\n  console.log(JSON.stringify(result))\n}\n","import {configureStore} from \"@reduxjs/toolkit\"\nimport {articlesReducer as articles} from \"../app/features/articles/articlesSlice\";\n\nexport default configureStore({\n  reducer: {articles}\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createBrowserHistory} from \"history\";\n\nexport const history = createBrowserHistory()\n\nexport const mainSections = {\n  HOME: 'HOME',\n  BLOG: 'BLOG',\n  ABOUT: 'ABOUT'\n}\n\nexport const routesToMainSections = {\n  '/': mainSections.HOME,\n  '/blog': mainSections.BLOG,\n  '/about': mainSections.ABOUT\n}\n","import React from 'react'\nimport {mainSections, routesToMainSections} from \"../../../config/router\";\nimport {Link, useLocation} from 'react-router-dom'\nimport './NavigationBar.scss'\n\nexport const NavigationBar = () => {\n  const location = useLocation()\n  const sectionLinkClass = section => section === routesToMainSections[location.pathname] ? 'NavLink active' : 'NavLink'\n\n  return (\n    <nav className='NavigationBar'>\n      <Link to=\"/\" data-testid='home-link' className={sectionLinkClass(mainSections.HOME)}>Home</Link>\n      <Link to=\"/blog\" data-testid='blog-link' className={sectionLinkClass(mainSections.BLOG)}>Blog</Link>\n      <Link to=\"/about\" data-testid='about-link' className={sectionLinkClass(mainSections.ABOUT)}>About me</Link>\n    </nav>\n  )\n}\n","import React from 'react'\nimport './Home.scss'\n\nexport const Home = () =>\n  <header>\n    <h1>Home page</h1>\n  </header>\n","import React, {useEffect, useState} from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport './Blog.scss'\n\nexport const Blog = () => {\n  const [article, setArticle] = useState(undefined)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://raw.githubusercontent.com/saljuama/articles/main/experiment/some-experiment.md')\n      return response.status === 200 ? await response.text() : ''\n    }\n    setArticle(fetchData())\n  }, [article])\n\n  return (\n    <div className='Article'>\n      <ReactMarkdown children={article}/>\n    </div>\n  )\n}\n","import React from 'react'\nimport './AboutMe.scss'\n\nexport const AboutMe = () =>\n  <header>\n    <h1>About page</h1>\n  </header>\n\n","import React from 'react'\n\nexport const NotFound = () =>\n  <div>Not found!</div>\n","import React, {useEffect} from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport {NavigationBar} from './navigation/components/NavigationBar'\nimport {Home} from './pages/home/Home'\nimport {Blog} from './pages/blog/Blog'\nimport {AboutMe} from './pages/aboutMe/AboutMe'\nimport {NotFound} from './pages/notFound/NotFound'\nimport './App.scss'\nimport {useDispatch} from \"react-redux\";\nimport {loadStuff} from \"./features/articles/articlesSlice\";\n\nexport const App = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(loadStuff())\n  })\n\n  return (\n    <div className=\"App\">\n      <NavigationBar/>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/blog\" component={Blog}/>\n        <Route exact path=\"/about\" component={AboutMe}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./config/store\";\nimport * as serviceWorker from './serviceWorker'\n\nimport {App} from './app/App'\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}