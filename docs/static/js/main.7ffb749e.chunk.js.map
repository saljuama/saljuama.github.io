{"version":3,"sources":["app/features/articles/articlesSlice.js","config/store.js","serviceWorker.js","config/router.js","app/navigation/components/NavigationBar.js","app/pages/home/Home.js","app/pages/blog/published.js","app/pages/blog/Blog.js","app/pages/aboutMe/AboutMe.js","app/pages/notFound/NotFound.js","app/App.js","index.js"],"names":["articlesReducer","createSlice","name","initialState","reducers","reducer","configureStore","articles","Boolean","window","location","hostname","match","mainSections","createBrowserHistory","routesToMainSections","NavigationBar","useLocation","sectionLinkClass","section","pathname","className","to","data-testid","Home","articleUrl","article","category","markdown","published","title","Blog","path","useRouteMatch","exact","component","ArticleList","Article","url","map","artUrl","useParams","useState","undefined","setMarkdown","useEffect","axios","get","then","response","data","catch","children","AboutMe","NotFound","App","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAUaA,EANSC,YAAY,CAChCC,KAAM,WACNC,aAJmB,GAKnBC,SAAU,KAGiCC,QCP9BC,cAAe,CAC5BD,QAAS,CAACE,cCQQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdOC,GAFUC,cAGf,QADKD,EAEL,OAFKA,EAGJ,QAGIE,EAAuB,CAClC,IAAKF,EACL,QAASA,EACT,SAAUA,GCRCG,G,MAAgB,WAC3B,IAAMN,EAAWO,cACXC,EAAmB,SAAAC,GAAO,OAAIA,IAAYJ,EAAqBL,EAASU,UAAY,iBAAmB,WAE7G,OACE,sBAAKC,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAIC,cAAY,YAAYF,UAAWH,EAAiBL,GAAjE,kBACA,cAAC,IAAD,CAAMS,GAAG,QAAQC,cAAY,YAAYF,UAAWH,EAAiBL,GAArE,kBACA,cAAC,IAAD,CAAMS,GAAG,SAASC,cAAY,aAAaF,UAAWH,EAAiBL,GAAvE,2BCVOW,G,MAAO,kBAClB,iCACE,+C,0CCDSC,G,YAAa,SAAAC,GAAO,iBAAQA,EAAQC,SAAhB,YAA4BD,EAAQE,YAOxDC,EAKD,CACR,CACEF,SAAU,wBACVG,MAAO,4BACPF,SAAU,+BAEZ,CACED,SAAU,wBACVG,MAAO,iDACPF,SAAU,oDAEZ,CACED,SAAU,oBACVG,MAAO,2BACPF,SAAU,8BAEZ,CACED,SAAU,oBACVG,MAAO,gCACPF,SAAU,qCC5BHG,G,OAAO,WAAO,IAClBC,EAAQC,cAARD,KACP,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,OAAK,EAACF,KAAMA,EAAMG,UAAWC,IACpC,cAAC,IAAD,CAAOJ,KAAI,UAAKA,EAAL,uBAAgCG,UAAWE,SAKtDD,EAAc,WAAO,IAClBE,EAAOL,cAAPK,IACD/B,EAAWsB,EACjB,OACE,sBAAKR,UAAU,OAAf,UACE,gDACCd,EAASgC,KAAI,SAAAb,GACZ,IAAMc,EAASf,EAAWC,GAC1B,OAAO,cAAC,IAAD,CAAMJ,GAAE,UAAKgB,GAAL,OAAWE,GAAnB,SAA2Cd,EAAQI,OAAjBU,UAMpCH,EAAU,WAAO,IAAD,EACCI,cAArBd,EADoB,EACpBA,SAAUD,EADU,EACVA,QADU,EAEKgB,wBAASC,GAFd,mBAEpBf,EAFoB,KAEVgB,EAFU,KAW3B,OAPAC,qBAAU,WACRC,IACGC,IADH,mEACmEpB,EADnE,YAC+ED,IAC5EsB,MAAK,SAAAC,GAAQ,OAAIL,EAAYK,EAASC,SACtCC,OAAM,kBAAMP,EAAY,gBAC1B,CAAChB,EAAUD,EAAUD,IAGtB,qBAAKL,UAAU,UAAf,SACE,cAAC,IAAD,CAAe+B,SAAUxB,OCzClByB,G,OAAU,kBACrB,iCACE,gDCHSC,EAAW,kBACtB,8CCMWC,G,OAAM,kBACjB,sBAAKlC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,OAAK,EAACF,KAAK,IAAIG,UAAWX,IACjC,cAAC,IAAD,CAAOQ,KAAK,QAAQG,UAAWJ,IAC/B,cAAC,IAAD,CAAOC,KAAK,SAASG,UAAWkB,IAChC,cAAC,IAAD,CAAOrB,KAAK,IAAIG,UAAWmB,Y,OCNjCE,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,STmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.7ffb749e.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {}\n\nconst articlesSlice = createSlice({\n  name: 'articles',\n  initialState,\n  reducers: {}\n})\n\nexport const articlesReducer = articlesSlice.reducer\n\n","import {configureStore} from \"@reduxjs/toolkit\"\nimport {articlesReducer as articles} from \"../app/features/articles/articlesSlice\";\n\nexport default configureStore({\n  reducer: {articles}\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createBrowserHistory} from \"history\";\n\nexport const history = createBrowserHistory()\n\nexport const mainSections = {\n  HOME: 'HOME',\n  BLOG: 'BLOG',\n  ABOUT: 'ABOUT'\n}\n\nexport const routesToMainSections = {\n  '/': mainSections.HOME,\n  '/blog': mainSections.BLOG,\n  '/about': mainSections.ABOUT\n}\n","import React from 'react'\nimport {mainSections, routesToMainSections} from \"../../../config/router\";\nimport {Link, useLocation} from 'react-router-dom'\nimport './NavigationBar.scss'\n\nexport const NavigationBar = () => {\n  const location = useLocation()\n  const sectionLinkClass = section => section === routesToMainSections[location.pathname] ? 'NavLink active' : 'NavLink'\n\n  return (\n    <nav className='NavigationBar'>\n      <Link to=\"/\" data-testid='home-link' className={sectionLinkClass(mainSections.HOME)}>Home</Link>\n      <Link to=\"/blog\" data-testid='blog-link' className={sectionLinkClass(mainSections.BLOG)}>Blog</Link>\n      <Link to=\"/about\" data-testid='about-link' className={sectionLinkClass(mainSections.ABOUT)}>About me</Link>\n    </nav>\n  )\n}\n","import React from 'react'\nimport './Home.scss'\n\nexport const Home = () =>\n  <header>\n    <h1>Home page</h1>\n  </header>\n","import axios from 'axios'\n\nconst repositoryUrl = `https://raw.githubusercontent.com/saljuama/articles/main`\n\nexport const articleUrl = article => `/${article.category}/${article.markdown}`\n\nexport const articleMarkdown = async article => await axios\n  .get(`${repositoryUrl}${articleUrl(article)}`)\n  .then(response => response.data)\n  .catch(() => '# Not Found')\n\nexport const published = {\n  categories: [\n    {title: 'High Performing Teams', key: 'high-performing-teams'},\n    {title: 'Agile Engineering', key: 'agile-engineering'}\n  ],\n  articles: [\n    {\n      category: 'high-performing-teams',\n      title: 'What is High Performance?',\n      markdown: 'what-is-high-performance.md'\n    },\n    {\n      category: 'high-performing-teams',\n      title: 'The role of diversity in high performing teams',\n      markdown: 'how-diversity-contributes-to-high-performance.md'\n    },\n    {\n      category: 'agile-engineering',\n      title: 'Feature Toggles and You!',\n      markdown: 'feature-toggles-and-you.md'\n    },\n    {\n      category: 'agile-engineering',\n      title: 'Breaking it into small pieces',\n      markdown: 'breaking-it-into-small-pieces.md'\n    }\n  ]\n}\n","import React, {useEffect, useState} from 'react'\nimport {Link, Route, Switch, useParams, useRouteMatch} from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown'\nimport axios from 'axios'\nimport {articleUrl, published} from \"./published\"\nimport './Blog.scss'\n\nexport const Blog = () => {\n  const {path} = useRouteMatch()\n  return (\n    <Switch>\n      <Route exact path={path} component={ArticleList}/>\n      <Route path={`${path}/:category/:article`} component={Article}/>\n    </Switch>\n  )\n}\n\nconst ArticleList = () => {\n  const {url} = useRouteMatch()\n  const articles = published.articles\n  return (\n    <div className='Blog'>\n      <h1>Blog main page</h1>\n      {articles.map(article => {\n        const artUrl = articleUrl(article);\n        return <Link to={`${url}${artUrl}`} key={artUrl}>{article.title}</Link>\n      })}\n    </div>\n  )\n}\n\nexport const Article = () => {\n  const {category, article} = useParams()\n  const [markdown, setMarkdown] = useState(undefined)\n\n  useEffect(() => {\n    axios\n      .get(`https://raw.githubusercontent.com/saljuama/articles/main/${category}/${article}`)\n      .then(response => setMarkdown(response.data))\n      .catch(() => setMarkdown(\"# Error\"))\n  }, [markdown, category, article])\n\n  return (\n    <div className='Article'>\n      <ReactMarkdown children={markdown}/>\n    </div>\n  )\n}\n","import React from 'react'\nimport './AboutMe.scss'\n\nexport const AboutMe = () =>\n  <header>\n    <h1>About page</h1>\n  </header>\n\n","import React from 'react'\n\nexport const NotFound = () =>\n  <div>Not found!</div>\n","import React from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport {NavigationBar} from './navigation/components/NavigationBar'\nimport {Home} from './pages/home/Home'\nimport {Blog} from './pages/blog/Blog'\nimport {AboutMe} from './pages/aboutMe/AboutMe'\nimport {NotFound} from './pages/notFound/NotFound'\nimport './App.scss'\n\nexport const App = () => (\n  <div className=\"App\">\n    <NavigationBar/>\n    <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/blog\" component={Blog}/>\n      <Route path=\"/about\" component={AboutMe}/>\n      <Route path=\"*\" component={NotFound}/>\n    </Switch>\n  </div>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./config/store\";\nimport * as serviceWorker from './serviceWorker'\n\nimport {App} from './app/App'\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}